/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

self.skipWaiting();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.
// @see https://developers.google.com/web/tools/workbox/guides/common-recipes#google_fonts
registerRoute(
  ({url}) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

registerRoute(
  ({url}) => url.origin === ('https://api.spotify.com') &&
  (
      // url.pathname.startsWith('/v1/me') ||
      url.pathname === '/v1/me' ||
      url.pathname === '/v1/me/following' ||
      url.pathname === '/v1/me/top/tracks' ||
      url.pathname === '/v1/me/top/artists' ||
      url.pathname === '/v1/browse/featured-playlists' ||
      url.pathname === '/v1/browse/categories' ||
      url.pathname === '/v1/me/tracks' ||
      url.pathname === '/v1/me/playlists' ||
      url.pathname === '/v1/me/albums' 
    ),
  new StaleWhileRevalidate({
    cacheName: 'spotify-api-response',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      // new ExpirationPlugin({
      //   maxEntries: 1 // Will cache maximum 1 requests.
      // }), 
    ]
  })
);

// Any other custom service worker logic can go here.
self.addEventListener('fetch', (event) => {
  // console.log(`fetch for ${event.request.url}`);
});